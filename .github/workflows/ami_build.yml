name: ami_build

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  ami_build:
    name: "Ami Build"
    runs-on: postgres-builder-32core
    timeout-minutes: 120
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: "Build Docker"
        run: docker build . -f Dockerfile_ami

  docker-build:
    name: Ami Build Docker
    runs-on: postgres-builder-32core
    timeout-minutes: 60
    steps:
      - name: Checkout
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # pin@v3
        with:
          # https://github.com/actions/checkout/issues/626
          # This is correct, because we're using a merge queue (mergify) which only merges when built against the latest target branch.
          # https://docs.mergify.com/actions/queue/
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Docker Cache
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ hashFiles('flake.nix') }}-${{ hashFiles('flake.lock') }}-${{ hashFiles(fromJson(matrix.image).dockerfile) }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ hashFiles('flake.nix') }}-${{ hashFiles('flake.lock') }}-

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: ${{ fromJson(matrix.image).context }}
          file: ${{ fromJson(matrix.image).dockerfile }}
          platforms: ${{ fromJson(matrix.image).platforms }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache,mode=max
          push: true
          tags: |
            ghcr.io/priceloop/nocode-${{ fromJson(matrix.image).name }}:${{env.APP_COMMIT}}
            ghcr.io/priceloop/nocode-${{ fromJson(matrix.image).name }}:${{env.APP_VERSION}}
